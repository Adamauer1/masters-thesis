import org.jwildfire.create.tina.base.Flame;
import org.jwildfire.create.tina.base.XForm;
import org.jwildfire.create.tina.palette.RGBPalette;
import org.jwildfire.create.tina.palette.RGBColor;
import org.jwildfire.create.tina.script.ScriptRunnerEnvironment;
import org.jwildfire.create.tina.transform.XFormTransformService;
import org.jwildfire.create.tina.base.Layer;
import org.jwildfire.create.tina.base.DrawMode;
import org.jwildfire.create.tina.base.ColorType;
import org.jwildfire.create.tina.variation.Variation;
import org.jwildfire.create.tina.variation.VariationFunc;
import org.jwildfire.create.tina.variation.VariationFuncList;
import org.jwildfire.create.tina.mutagen.RandomGradientMutation;
import org.jwildfire.create.tina.transform.XFormTransformService;
import org.jwildfire.create.tina.base.EditPlane;
import org.jwildfire.create.tina.variation.Linear3DFunc;

public void run(ScriptRunnerEnvironment pEnv) throws Exception {
  // create a new flame
    RGBColor startColor = new RGBColorCOLOR;
    RGBColor endColor = new RGBColor(RED_END,GREEN_END,BLUE_END);
    RGBPalette palette = new RGBPalette();
     for (int i = 0; i < RGBPalette.PALETTE_SIZE; i++) {
         float t = (float)i / (RGBPalette.PALETTE_SIZE - 1);
  
      // Optionally add randomness to interpolation
      float jitter = 0.1f * (float)Math.random();
      t = Math.min(1.0f, Math.max(0.0f, t + (Math.random() < 0.5 ? -jitter : jitter)));
  
      int r = (int)(startColor.getRed()   + t * (endColor.getRed()   - startColor.getRed()));
      int g = (int)(startColor.getGreen() + t * (endColor.getGreen() - startColor.getGreen()));
      int b = (int)(startColor.getBlue()  + t * (endColor.getBlue()  - startColor.getBlue()));
  
      palette.setColor(i, r, g, b);
    }
  Flame flame = new Flame();
    Layer layer = flame.getFirstLayer();
    flame.setCentreX(0.0);
    flame.setCentreY(0.0);
    flame.setPixelsPerUnit(200);
    layer.getFinalXForms().clear();
    layer.getXForms().clear();
    flame.setPalette(palette);

    int maxXForms = (int) (2.0 + Math.random() * 5.0);
    double scl = RMSENERGY * 10;
    double tsclX = VALENCE * 10;
    double tsclY = AROUSAL * 10;

    boolean contRot = Math.random() < 0.5;
    double r0 = 0;


    for (int i = 0; i < maxXForms; i++) {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      if (contRot) {
        r0 += 45.0 * Math.random() - 9.0 * Math.random();
        XFormTransformService.rotate(xForm, r0);
      }
      else {
        if (Math.random() < 0.5) {
          XFormTransformService.rotate(xForm, 360.0 * Math.random());
        }
        else {
          XFormTransformService.rotate(xForm, -360.0 * Math.random());
        }
      }
      XFormTransformService.localTranslate(xForm, (2.0 * Math.random() - 1.0) * tsclX, (2.0 * Math.random() - 1.0) * tsclY);
      //XFormTransformService.localTranslate(xForm, (2.0 * PLACEHOLDER_1 - 1.0) * tscl, (2.0 * PLACEHOLDER_2 - 1.0) * tscl);
      scl *= 0.8 + Math.random() * 0.1;
      tsclX *= 0.8 + Math.random() * 0.1;
      tsclY *= 0.8 + Math.random() * 0.1;
      XFormTransformService.scale(xForm, scl, true, true);

      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColorCOLOR;
      xForm.addVariation(Math.random() * 0.5 + 0.5, new Linear3DFunc());
      xForm.setWeight(scl * Math.random() * 19.9 + 0.1);
    }


  
  // Either update the currently selected flame (to not need to create a new thumbnail
  // in the thumbnail ribbon after each run of the script...
  Flame selFlame = pEnv.getCurrFlame();
  if(selFlame!=null) {
    selFlame.assign(flame);
    pEnv.refreshUI();
  }
  // ...or load the flame in the editor and refresh the UI
  else {
    pEnv.setCurrFlame(flame);
  }
}
