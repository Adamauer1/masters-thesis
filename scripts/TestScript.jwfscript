// begin header section
import org.jwildfire.create.tina.base.Flame;
import org.jwildfire.create.tina.base.XForm;
import org.jwildfire.create.tina.palette.RGBPalette;
import org.jwildfire.create.tina.palette.RGBColor;
import org.jwildfire.create.tina.script.ScriptRunnerEnvironment;
import org.jwildfire.create.tina.transform.XFormTransformService;
import org.jwildfire.create.tina.base.Layer;
import org.jwildfire.create.tina.base.DrawMode;
import org.jwildfire.create.tina.base.ColorType;
import org.jwildfire.create.tina.variation.*;
//import org.jwildfire.create.tina.variation.VariationFunc;
//import org.jwildfire.create.tina.variation.VariationFuncList;
//import org.jwildfire.create.tina.mutagen.RandomGradientMutation;
import org.jwildfire.create.tina.dance.DancingFlameProject;
import org.jwildfire.create.tina.transform.XFormTransformService;
import org.jwildfire.create.tina.base.EditPlane;
//import org.jwildfire.create.tina.variation.Linear3DFunc;
import org.jwildfire.create.tina.io.*;
import org.jwildfire.base.Tools;
import static org.jwildfire.base.mathlib.MathLib.M_PI;
import org.jwildfire.create.tina.mutagen.*;
import org.jwildfire.create.tina.dance.DancingFlameProject;
import org.jwildfire.create.tina.io.JWFDanceWriter;
import org.jwildfire.create.tina.dance.motion.*;
import org.jwildfire.create.tina.animate.*;
import org.jwildfire.base.Prefs;
import org.jwildfire.create.tina.dance.model.FlamePropertyPath;
import org.jwildfire.create.tina.audio.JLayerInterface;
import org.jwildfire.create.tina.randomflame.ExperimentalSimpleRandomFlameGenerator;
public void run(ScriptRunnerEnvironment pEnv) throws Exception {
    JLayerInterface player = new JLayerInterface();
    DancingFlameProject danceProject = new DancingFlameProject();
    JWFDanceWriter danceWriter = new JWFDanceWriter();
    FlameMovie flameMovie = new FlameMovie(Prefs.getPrefs());
// end header section

AddFlameMoviePart(flameMovie, GalaxiesGen(0,0.2757399999999989, 0.026486666666666003, 0, 255, 255, 228, 242, 230, 0.12854309380054474), 12);
AddFlameMoviePart(flameMovie, SynthGen(1,-0.08210999999999101, -0.012173333333333996, 0, 255, 255, 251, 249, 251, 0.07073262333869934), 12);
AddFlameMoviePart(flameMovie, MandGen(2,-0.009609999999989996, 0.007633333333333996, 0, 255, 255, 248, 246, 249, 0.07578767836093903), 12);
AddFlameMoviePart(flameMovie, BrokatGen(3,0.15885999999998998, -0.2216133333333339, 0, 255, 255, 242, 226, 199, 0.0742955133318901), 24);
AddFlameMoviePart(flameMovie, SynthGen(4,-0.08294000000001002, -0.01556666666665861, 0, 255, 255, 251, 249, 251, 0.11982893198728561), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(5,0.33170000000001, 0.04276, 0, 255, 255, 222, 245, 228, 0.1427743136882782), 36);
AddFlameMoviePart(flameMovie, LinearOnlyGen(6,-0.2677799999999999, 0.10560000000000003, 0, 255, 255, 219, 214, 248, 0.14995361864566803), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(7,0.37157000000001006, 0.06817999999999999, 0, 255, 255, 221, 245, 228, 0.11915400624275208), 24);
AddFlameMoviePart(flameMovie, JulianGen(8,0.19208000000001008, -0.06466666666666002, 0, 255, 255, 237, 238, 220, 0.1668897569179535), 12);
AddFlameMoviePart(flameMovie, LinearOnlyGen(9,-0.20538, 0.13595333333332596, 0, 255, 255, 216, 219, 250, 0.1698899269104004), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(10,0.7169600000000096, 0.014259999999999997, 0, 255, 255, 218, 250, 199, 0.1121537983417511), 36);
AddFlameMoviePart(flameMovie, JulianGen(11,0.3651399999999989, -0.061420000000019986, 0, 255, 255, 235, 245, 214, 0.15500572323799133), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(12,0.21774999999999023, 0.057933333333324025, 0, 255, 255, 225, 239, 233, 0.08787798136472702), 24);
AddFlameMoviePart(flameMovie, JulianGen(13,0.30720999999999904, -0.161993333333332, 0, 255, 255, 242, 237, 202, 0.14315414428710938), 24);
AddFlameMoviePart(flameMovie, LinearOnlyGen(14,-0.16763000000001, 0.029713333333329987, 0, 255, 255, 229, 223, 241, 0.10339140892028809), 12);
AddFlameMoviePart(flameMovie, JulianGen(15,0.21492000000002998, -0.07575333333333999, 0, 255, 255, 237, 238, 217, 0.17792080342769623), 12);
AddFlameMoviePart(flameMovie, MandGen(16,-0.070369999999998, 0.10913333333333938, 0, 255, 255, 219, 228, 246, 0.09846819937229156), 12);
AddFlameMoviePart(flameMovie, JulianGen(17,0.19112999999998198, -0.11042, 0, 255, 255, 240, 234, 214, 0.15123337507247925), 12);
AddFlameMoviePart(flameMovie, SynthGen(18,-0.00021000000000002847, -0.014833333333319399, 0, 255, 255, 1, 1, 0, 0.11770634353160858), 12);
AddFlameMoviePart(flameMovie, JulianGen(19,0.15164000000003103, -0.057700000000000015, 0, 255, 255, 236, 235, 222, 0.15396066009998322), 12);
AddFlameMoviePart(flameMovie, SynthGen(20,-0.24196999999998003, -0.07584000000000458, 0, 255, 255, 239, 213, 231, 0.14441917836666107), 12);
AddFlameMoviePart(flameMovie, JulianGen(21,0.17768999999999696, -0.07191999999999603, 0, 255, 255, 237, 237, 219, 0.1955268681049347), 12);
AddFlameMoviePart(flameMovie, SynthGen(22,-0.2121200000000099, -0.008373333333329396, 0, 255, 255, 240, 233, 244, 0.10971017926931381), 12);
AddFlameMoviePart(flameMovie, JulianGen(23,0.4750200000000089, -0.026219999999999993, 0, 255, 255, 230, 250, 212, 0.13426995277404785), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(24,0.44157000000003, 0.0296800000000074, 0, 255, 255, 221, 245, 221, 0.11720868945121765), 24);
AddFlameMoviePart(flameMovie, LinearOnlyGen(25,-0.11708999999997002, 0.01486000000004601, 0, 255, 255, 230, 224, 239, 0.1404627412557602), 12);
AddFlameMoviePart(flameMovie, JulianGen(26,0.20373, -0.025833333333327994, 0, 255, 255, 233, 239, 224, 0.11844072490930557), 24);
AddFlameMoviePart(flameMovie, SynthGen(27,-0.017299999999989005, -0.12283999999999859, 0, 255, 255, 253, 243, 234, 0.1643849015235901), 12);
AddFlameMoviePart(flameMovie, JulianGen(28,0.22684000000002907, -0.1355266666666746, 0, 255, 255, 240, 235, 209, 0.18738976120948792), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(29,0.45065999999999995, 0.0004000000000019997, 0, 255, 255, 44, 48, 39, 0.11197012662887573), 12);
AddFlameMoviePart(flameMovie, SynthGen(30,-0.22175999999999996, -0.13043999999999084, 0, 255, 255, 239, 212, 224, 0.17209312319755554), 12);
AddFlameMoviePart(flameMovie, LinearOnlyGen(31,-0.18944000000000094, 0.046473333333330785, 0, 255, 255, 228, 221, 243, 0.11478622257709503), 12);
AddFlameMoviePart(flameMovie, JulianGen(32,0.083380000000029, -0.051499999999999976, 0, 255, 255, 238, 233, 224, 0.19461016356945038), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(33,0.49846000000001095, 0.006440000000014001, 0, 255, 255, 223, 248, 214, 0.11574289947748184), 12);
AddFlameMoviePart(flameMovie, SynthGen(34,-0.22987000000001104, -0.20716666666667197, 0, 255, 255, 243, 203, 213, 0.1771388053894043), 12);
AddFlameMoviePart(flameMovie, JulianGen(35,0.3571600000000079, -0.05093333333332602, 0, 255, 255, 235, 244, 215, 0.1307772547006607), 24);
AddFlameMoviePart(flameMovie, GalaxiesGen(36,0.22487000000000093, 0.057146666666666006, 0, 255, 255, 224, 241, 233, 0.123006671667099), 12);
AddFlameMoviePart(flameMovie, SynthGen(37,-0.05875000000002001, -0.1115133333333474, 0, 255, 255, 239, 224, 222, 0.18719543516635895), 12);
AddFlameMoviePart(flameMovie, GalaxiesGen(38,0.16955999999996696, 0.046020000000000005, 0, 255, 255, 227, 238, 236, 0.09138956665992737), 24);
AddFlameMoviePart(flameMovie, SynthGen(39,-0.08889999999999901, -0.08269333333333118, 0, 255, 255, 238, 222, 224, 0.14821882545948029), 12);
AddFlameMoviePart(flameMovie, JulianGen(40,0.24690999999999896, -0.03941333333333397, 0, 255, 255, 235, 241, 221, 0.15373557806015015), 24);
AddFlameMoviePart(flameMovie, SynthGen(41,-0.11418999999999, -0.11358666666667463, 0, 255, 255, 241, 221, 222, 0.19553495943546295), 12);
AddFlameMoviePart(flameMovie, BrokatGen(42,0.15590000000000098, -0.140699999999998, 0, 255, 255, 241, 231, 211, 0.14933790266513824), 12);
AddFlameMoviePart(flameMovie, JulianGen(43,0.18078000000000902, -0.05105333333333602, 0, 255, 255, 236, 237, 223, 0.15797753632068634), 24);
AddFlameMoviePart(flameMovie, GalaxiesGen(44,0.34195999999999804, 0.037186666666678, 0, 255, 255, 225, 243, 225, 0.10200954228639603), 12);
AddFlameMoviePart(flameMovie, SynthGen(45,-0.24814000000000197, -0.048380000000002005, 0, 255, 255, 237, 214, 232, 0.1800653636455536), 12);
flameMovie.getGlobalScripts()[0] = new GlobalScript(GlobalScriptType.ROTATE_ROLL, 0.95703125);
// begin footer section
  // Either update the currently selected flame (to not need to create a new thumbnail
  // in the thumbnail ribbon after each run of the script...
  Flame selFlame = pEnv.getCurrFlame();
  if(selFlame!=null) {
    //selFlame.assign(flame);
    pEnv.refreshUI();
  }
  // ...or load the flame in the editor and refresh the UI
  else {
    //pEnv.setCurrFlame(flame);
  }
  flameMovie.getxFormScripts()[0] = new XFormScript(XFormScriptType.ROTATE_FULL, 1); //1,2,3,4,5
  flameMovie.getxFormScripts()[1] = new XFormScript(XFormScriptType.ROTATE_FINAL_XFORM, 1); //6,7,8,9
  flameMovie.getxFormScripts()[2] = new XFormScript(XFormScriptType.ROTATE_FIRST_XFORM, 1); //10,11,12,13,14,15,16,17,18,19
  flameMovie.getxFormScripts()[3] = new XFormScript(XFormScriptType.ROTATE_2ND_XFORM, 1); //20,21,22,23,24,25,26,27,28,29
  flameMovie.getxFormScripts()[4] = new XFormScript(XFormScriptType.ROTATE_3RD_XFORM, 1); //30,31,32,33,34,35,36,37,38,39
  flameMovie.getxFormScripts()[5] = new XFormScript(XFormScriptType.ROTATE_4TH_XFORM, 1); //40,41,42,43,44,45,46,47,48,49
  flameMovie.getxFormScripts()[6] = new XFormScript(XFormScriptType.ROTATE_5TH_XFORM, 1); //50,51,52,53,54,55,56,57,58,59
  flameMovie.getxFormScripts()[7] = new XFormScript(XFormScriptType.ROTATE_LAST_XFORM, 1); //60,61,62,63,64
  FlameMovieWriter flameMovieWriter = new FlameMovieWriter();
  flameMovieWriter.writeFlame(flameMovie, "sample.jwfrender");
}
// end footer section
// start linear only gen flame
// Mandelbrot Generator
public Flame MandGen(int frameNumber, double valence, double arousal, int redStart, int greenStart, int blueStart, int redEnd, int greenEnd, int blueEnd, double rmsEnergy) throws Exception {

    // create a new flame
    Flame flame = new Flame();
    flame.setCentreX(0.0);
    flame.setCentreY(0.0);
    flame.setPixelsPerUnit(200);
    flame.setCamZoom(1.0);
    Layer layer = flame.getFirstLayer();
    layer.getFinalXForms().clear();
    layer.getXForms().clear();
    RGBPalette palette = PaletteGen(redStart, greenStart, blueStart, redEnd, greenEnd, blueEnd);
    flame.setPalette(palette);

    String primary = Math.random() < 0.666 ? "mandelbrot" : "fract_mandelbrot_wf";

    // 1st xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.00001 + Math.random() * 20.0);
      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(RED,GREEN,BLUE);
      XFormTransformService.localTranslate(xForm, valence, arousal, false);
      XFormTransformService.rotate(xForm, 360.0*Math.random(), false);
      if (Math.random() < 0.5) {
        xForm.addVariation(-1.0 + Math.random() * 2.0, VariationFuncList.getVariationFuncInstance(VariationFuncList.getRandomVariationname(), true));
      }
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(primary, true);
      //varFunc.setParameter("power", (int)(Math.random()*7) + 1);
      //varFunc.setParameter("dist", -2.0 + 4.0 * Math.random());
      xForm.addVariation(-2.0 + Math.random() * 4.0, varFunc);
     // randomAffine(xForm);
    }
    // 2nd xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.00001 + Math.random() * 6.0);
      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(RED,GREEN,BLUE);
      XFormTransformService.localTranslate(xForm, valence, arousal, false);
      XFormTransformService.rotate(xForm, 360.0*Math.random(), false);
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(primary, true);
     // varFunc.setParameter("power", (int)(Math.random()*7) + 1);
      //varFunc.setParameter("dist", -2.0 + 4.0 * Math.random());
      xForm.addVariation(-2.0 + Math.random() * 4.0, varFunc);
      if (Math.random() < 0.8) {
        xForm.addVariation(-1.0 + Math.random() * 2.0, VariationFuncList.getVariationFuncInstance("linear", true));
        xForm.addVariation(-1.0 + Math.random() * 2.0, VariationFuncList.getVariationFuncInstance(VariationFuncList.getRandomVariationname(), true));
      }
      xForm.getModifiedWeights()[1] = Math.random() < 0.5 ? 0.0 : Math.random();
      XFormTransformService.scale(xForm, 0.5 + Math.random() * 0.5, Math.random() < 0.5, Math.random() < 0.5);
      //randomAffine(xForm);
    }
    // 3rd xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.00001 + Math.random() * 2.0);
      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(RED,GREEN,BLUE);
      XFormTransformService.localTranslate(xForm, valence, arousal, false);
      XFormTransformService.rotate(xForm, 360.0*Math.random(), false);
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(primary, true);
      //varFunc.setParameter("power", (int)(Math.random()*7) + 1);
      //varFunc.setParameter("dist", -2.0 + 4.0 * Math.random());
      xForm.addVariation(-2.0 + Math.random() * 4.0, varFunc);
      //randomAffine(xForm);
      //randomPostAffine(xForm);
    }
    //File outFile = new File("flames/" + frameNumber + ".flame");
        try {
          new FlameWriter().writeFlame(flame, "flames/" + frameNumber + ".flame");
        } catch (Exception ex) {
          System.err.println("Error writing flame " + frameNumber + ": " + ex.getMessage());
        }

    return flame;
}




// end linear only gen flame

// start linear only gen flame
// Linear Only Generator
public Flame LinearOnlyGen(int frameNumber, double valence, double arousal, int redStart, int greenStart, int blueStart, int redEnd, int greenEnd, int blueEnd, double rmsEnergy) throws Exception {
    // create a new flame

    Flame flame = new Flame();
    Layer layer = flame.getFirstLayer();
    flame.setCentreX(0.0);
    flame.setCentreY(0.0);
    flame.setPixelsPerUnit(200);
    layer.getFinalXForms().clear();
    layer.getXForms().clear();
    RGBPalette palette = PaletteGen(redStart, greenStart, blueStart, redEnd, greenEnd, blueEnd);
    flame.setPalette(palette);

    int maxXForms = (int) (2.0 + Math.random() * 5.0);
    double scl = rmsEnergy * 10;
    double tsclX = valence * 10;
    double tsclY = arousal * 10;

    boolean contRot = Math.random() < 0.5;
    double r0 = 0;


    for (int i = 0; i < maxXForms; i++) {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      if (contRot) {
        r0 += 45.0 * Math.random() - 9.0 * Math.random();
        XFormTransformService.rotate(xForm, r0);
      }
      else {
        if (Math.random() < 0.5) {
          XFormTransformService.rotate(xForm, 360.0 * Math.random());
        }
        else {
          XFormTransformService.rotate(xForm, -360.0 * Math.random());
        }
      }
      XFormTransformService.localTranslate(xForm, (2.0 * Math.random() - 1.0) * tsclX, (2.0 * Math.random() - 1.0) * tsclY);
      //XFormTransformService.localTranslate(xForm, (2.0 * PLACEHOLDER_1 - 1.0) * tscl, (2.0 * PLACEHOLDER_2 - 1.0) * tscl);
      scl *= 0.8 + Math.random() * 0.1;
      tsclX *= 0.8 + Math.random() * 0.1;
      tsclY *= 0.8 + Math.random() * 0.1;
      XFormTransformService.scale(xForm, scl, true, true);

      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColorCOLOR;
      xForm.addVariation(Math.random() * 0.5 + 0.5, new Linear3DFunc());
      xForm.setWeight(scl * Math.random() * 19.9 + 0.1);
    }

    //File outFile = new File("flames/" + frameNumber + ".flame");
        try {
          //new FlameWriter().writeFlame(flame, outFile.getAbsolutePath());
          new FlameWriter().writeFlame(flame, "flames/" + frameNumber + ".flame");
        } catch (Exception ex) {
          System.err.println("Error writing flame " + frameNumber + ": " + ex.getMessage());
        }

    return flame;
}


// end linear only gen flame

// start brokat_gen flame
public Flame BrokatGen(int frameNumber, double valence, double arousal, int redStart, int greenStart, int blueStart, int redEnd, int greenEnd, int blueEnd, double rmsEnergy) throws Exception {
  // create a new flame
    Flame flame = new Flame();
    flame.setCentreX(0.0);
    flame.setCentreY(0.0);
    flame.setPixelsPerUnit(200);
    flame.setCamZoom(2.0);
    flame.setCamRoll(-90.0);
    Layer layer = flame.getFirstLayer();
    layer.getFinalXForms().clear();
    layer.getXForms().clear();
    RGBPalette palette = PaletteGen(redStart, greenStart, blueStart, redEnd, greenEnd, blueEnd);
    flame.setPalette(palette);
    // 1st xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(1.5 + Math.random() * 1.0);
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance("curl", true);
      varFunc.setParameter("c1", -1.0);
      varFunc.setParameter("c2", 0.001 + Math.random() * 0.0199);
      xForm.addVariation(1.6 + Math.random() * 0.8, varFunc);

      xForm.setColor(0.4 + Math.random() * 0.2);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(196,157, 228);
      xForm.setColorSymmetry(0.82 + Math.random() * 0.16);
      XFormTransformService.rotate(xForm, 180, false);
      //XFormTransformService.localTranslate(xForm, 1.0, 0.0, true);
      XFormTransformService.localTranslate(xForm, valence, arousal, true);
      xForm.getModifiedWeights()[0] = 0.0;
      xForm.getModifiedWeights()[1] = 1.0;
      xForm.getModifiedWeights()[2] = 0.0;
      xForm.getModifiedWeights()[3] = 0.0;
    }
    // 2nd xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.05 + Math.random() * 0.35);
      String fncNames[] = { "juliascope", "julia3D", "julia3Dz", "julian" };
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(fncNames[Tools.randomInt(fncNames.length)], true);
      varFunc.setParameter("power", Math.random() < 0.33 ? 2 : Math.random() < 0.5 ? 3 : 4);
      xForm.addVariation(1.0, varFunc);
      xForm.setColor(0.5 + Math.random() * 0.5);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(202,166, 225);
      xForm.setColorSymmetry(0.5);
      xForm.getModifiedWeights()[0] = 1.0;
      xForm.getModifiedWeights()[1] = 0.0;
      xForm.getModifiedWeights()[2] = 1.0;
      xForm.getModifiedWeights()[3] = 1.0;
    }

    // 3rd xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.4 + Math.random() * 0.2);
      String fncName;
      if (Math.random() < 0.33) {
        fncName = "bubble";
      }
      else {
        fncName = ExperimentalSimpleRandomFlameGenerator.FNCLST_EXPERIMENTAL[Tools.randomInt(ExperimentalSimpleRandomFlameGenerator.FNCLST_EXPERIMENTAL.length)];
      }
      xForm.addVariation(0.01 + Math.random() * 0.04, VariationFuncList.getVariationFuncInstance(fncName, true));
      xForm.addVariation(5.0 + Math.random() * 10.0, VariationFuncList.getVariationFuncInstance("pre_blur", true));
      xForm.setColor(0.1 + Math.random() * 0.3);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(133,85, 234);
      xForm.setColorSymmetry(0);
      //XFormTransformService.localTranslate(xForm, -1.0, 0.0, true);
      XFormTransformService.localTranslate(xForm, -valence, arousal, true);
      xForm.getModifiedWeights()[0] = 1.0;
      xForm.getModifiedWeights()[1] = 1.0;
      xForm.getModifiedWeights()[2] = 0.0;
      xForm.getModifiedWeights()[3] = 0.0;

    }
    // 4th xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.4 + Math.random() * 0.2);
      String fncName = ExperimentalSimpleRandomFlameGenerator.FNCLST_EXPERIMENTAL[Tools.randomInt(ExperimentalSimpleRandomFlameGenerator.FNCLST_EXPERIMENTAL.length)];
      xForm.addVariation(0.01 + Math.random() * 0.04, VariationFuncList.getVariationFuncInstance(fncName, true));
      if (Math.random() > 0.5) {
        xForm.addVariation((0.01 + Math.random() * 0.04) * 0.5, VariationFuncList.getVariationFuncInstance(VariationFuncList.getRandomVariationname(), true)).setPriority(-1);
      }

      xForm.setColor(0.1 + Math.random() * 0.3);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(133,85, 234);
      xForm.setColorSymmetry(0);
      XFormTransformService.rotate(xForm, Math.random() * 360.0, true);
      //XFormTransformService.scale(xForm, 1.1 + Math.random() * 3.0, true, true, true);
      XFormTransformService.scale(xForm, rmsEnergy, true, true, true);
      xForm.getModifiedWeights()[0] = 1.0;
      xForm.getModifiedWeights()[1] = 1.0;
      xForm.getModifiedWeights()[2] = 1.0;
      xForm.getModifiedWeights()[3] = 1.0;

    }
    //File outFile = new File("flames/" + frameNumber + ".flame");
        try {
          new FlameWriter().writeFlame(flame, "flames/" + frameNumber + ".flame");
        } catch (Exception ex) {
          System.err.println("Error writing flame " + frameNumber + ": " + ex.getMessage());
        }

    return flame;
}

// end brokat_gen flame

// start galaxies_gen flame
public Flame GalaxiesGen(int frameNumber, double valence, double arousal, int redStart, int greenStart, int blueStart, int redEnd, int greenEnd, int blueEnd, double rmsEnergy) throws Exception {
  // create a new flame
Flame flame = new Flame();
    Layer layer = flame.getFirstLayer();
    flame.setCamRoll(1.49758722);
    flame.setCamPitch(0);
    flame.setCamYaw(0);
    flame.setCamBank(0);
    flame.setCamPerspective(0);
    flame.setWidth(601);
    flame.setHeight(338);
    flame.setPixelsPerUnit(92.48366013);
    flame.setCamZoom(0.72 + Math.random() * 0.42);
    flame.setCentreX(1.5357526);
    flame.setCentreY(-0.4416446);
    layer.getFinalXForms().clear();
    layer.getXForms().clear();
    RGBPalette palette = PaletteGen(redStart, greenStart, blueStart, redEnd, greenEnd, blueEnd);
    flame.setPalette(palette);

    // create transform 1
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(25.75871591);
      xForm.setColor(0.74488914);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(196,157, 228);
      xForm.setColorSymmetry(0);

      xForm.setCoeff00(1); // a
      xForm.setCoeff10(0); // b
      xForm.setCoeff20(1.09171281); // e
      xForm.setCoeff01(0); // c
      xForm.setCoeff11(1); // d
      xForm.setCoeff21(-1.22115911); // f

      xForm.setPostCoeff00(1);
      xForm.setPostCoeff10(0);
      xForm.setPostCoeff01(0);
      xForm.setPostCoeff11(1);
      xForm.setPostCoeff20(0);
      xForm.setPostCoeff21(0);
      // variation 1
      {
        double amount = Math.random() > 0.25 ? 1.0 - 2.0 * Math.random() : 1.0;
        xForm.addVariation(amount, getRandomVariation());
        if (Math.random() > 0.5) {
          new RandomParamMutation().setRandomFlameProperty(flame.getFirstLayer(), 1.0);
        }
      }

    }

    // create transform 2
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(286.87636036);
      xForm.setColor(0.90312262);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(202,166, 225);
      xForm.setColorSymmetry(0.95);

      xForm.setCoeff00(0.96333808); // a
      xForm.setCoeff10(0.12845865); // b
      xForm.setCoeff20(0.31387449); // e
      xForm.setCoeff01(-0.12845865); // c
      xForm.setCoeff11(0.96333808); // d
      xForm.setCoeff21(0.08003269); // f

      xForm.setPostCoeff00(1);
      xForm.setPostCoeff10(0);
      xForm.setPostCoeff01(0);
      xForm.setPostCoeff11(1);
      xForm.setPostCoeff20(0);
      xForm.setPostCoeff21(0);

      // variation 1
      xForm.addVariation(1, VariationFuncList.getVariationFuncInstance("sec", true));
    }

    if (Math.random() > 0.5) {
      new LocalGammaMutation().execute(flame.getFirstLayer());
    }

    //File outFile = new File("flames/" + frameNumber + ".flame");
        try {
          //new FlameWriter().writeFlame(flame, outFile.getAbsolutePath());
          new FlameWriter().writeFlame(flame, "flames/" + frameNumber + ".flame");
        } catch (Exception ex) {
          System.err.println("Error writing flame " + frameNumber + ": " + ex.getMessage());
        }

    return flame;
}
private VariationFunc getRandomVariation() {
    String name = getRandomVariationName();
    return VariationFuncList.getVariationFuncInstance(name, true);
  }

private String getRandomVariationName() {
    while (true) {
      String name = VariationFuncList.getRandomVariationname();
      if (!name.startsWith("fract") && !name.startsWith("inflate") && !name.startsWith("pre_") && !name.startsWith("post_")
          && !name.startsWith("prepost_") && !name.equals("flatten")) {
        return name;
      }
    }
  }

// end galaxies_gen flame

// start julian_gen flame
public Flame JulianGen(int frameNumber, double valence, double arousal, int redStart, int greenStart, int blueStart, int redEnd, int greenEnd, int blueEnd, double rmsEnergy){

  // create a new flame
  Flame flame = new Flame();
    flame.setCentreX(0.0);
    flame.setCentreY(0.0);
    flame.setPixelsPerUnit(200);
    flame.setCamZoom(1.0);
    Layer layer = flame.getFirstLayer();
    layer.getFinalXForms().clear();
    layer.getXForms().clear();
    RGBPalette palette = PaletteGen(redStart, greenStart, blueStart, redEnd, greenEnd, blueEnd);
    flame.setPalette(palette);

    String primary = Math.random() < 0.666 ? "julian" : "juliascope";

    // 1st xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.00001 + Math.random() * 20.0);
      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(196,157, 228);
      XFormTransformService.localTranslate(xForm, valence, arousal, false);
      XFormTransformService.rotate(xForm, 360.0*Math.random(), false);
      if (Math.random() < 0.5) {
        xForm.addVariation(-1.0 + Math.random() * 2.0, VariationFuncList.getVariationFuncInstance(VariationFuncList.getRandomVariationname(), true));
      }
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(primary, true);
      varFunc.setParameter("power", (int)(Math.random()*7) + 1);
      varFunc.setParameter("dist", -2.0 + 4.0 * Math.random());
      xForm.addVariation(-2.0 + Math.random() * 4.0, varFunc);
     // randomAffine(xForm);
    }
    // 2nd xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.00001 + Math.random() * 6.0);
      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(202,166, 225);
      XFormTransformService.localTranslate(xForm, valence, arousal, false);
      XFormTransformService.rotate(xForm, 360.0*Math.random(), false);
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(primary, true);
      varFunc.setParameter("power", (int)(Math.random()*7) + 1);
      varFunc.setParameter("dist", -2.0 + 4.0 * Math.random());
      xForm.addVariation(-2.0 + Math.random() * 4.0, varFunc);
      if (Math.random() < 0.8) {
        xForm.addVariation(-1.0 + Math.random() * 2.0, VariationFuncList.getVariationFuncInstance("linear", true));
        xForm.addVariation(-1.0 + Math.random() * 2.0, VariationFuncList.getVariationFuncInstance(VariationFuncList.getRandomVariationname(), true));
      }
      xForm.getModifiedWeights()[1] = Math.random() < 0.5 ? 0.0 : Math.random();
      //XFormTransformService.scale(xForm, 0.5 + Math.random() * 0.5, Math.random() < 0.5, Math.random() < 0.5);
      XFormTransformService.scale(xForm, rmsEnergy, true, true);
      //randomAffine(xForm);
    }
    // 3rd xForm
    {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(0.00001 + Math.random() * 2.0);
      xForm.setColor(Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(133,85, 234);
      XFormTransformService.localTranslate(xForm, valence, arousal, false);
      XFormTransformService.rotate(xForm, 360.0*Math.random(), false);
      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(primary, true);
      varFunc.setParameter("power", (int)(Math.random()*7) + 1);
      varFunc.setParameter("dist", -2.0 + 4.0 * Math.random());
      xForm.addVariation(-2.0 + Math.random() * 4.0, varFunc);
      //randomAffine(xForm);
      //randomPostAffine(xForm);
    }

        //File outFile = new File("flames/" + frameNumber + ".flame");
        try {
          //new FlameWriter().writeFlame(flame, outFile.getAbsolutePath());
          new FlameWriter().writeFlame(flame, "flames/" + frameNumber + ".flame");
        } catch (Exception ex) {
          System.err.println("Error writing flame " + frameNumber + ": " + ex.getMessage());
        }

    return flame;
}

// end julian_gen flame

// start synth_gen flame
public Flame SynthGen(int frameNumber, double valence, double arousal, int redStart, int greenStart, int blueStart, int redEnd, int greenEnd, int blueEnd, double rmsEnergy) throws Exception {
  // create a new flame
   Flame flame = new Flame();
    Layer layer = flame.getFirstLayer();
    flame.setCentreX(0.0);
    flame.setCentreY(0.0);
    flame.setPixelsPerUnit(300+Math.random()*300.0);
    layer.getFinalXForms().clear();
    layer.getXForms().clear();
    RGBPalette palette = PaletteGen(redStart, greenStart, blueStart, redEnd, greenEnd, blueEnd);
    flame.setPalette(palette);
    // init
    // These vars affect the style of the centre effect
    double centre_synth = 0.7;
    double centre_mode = Tools.randomInt(20); //5;
    double centre_noise = .0;
    double centre_power = -1.0;
    double centre_smooth = 1;
    double centre_color = 0.4 + 0.2 * Math.random();
    double centre_symmetry = 0.6 + 0.4 * Math.random();
    XForm xForm1;
    // 1st XForm
    {
      XForm xForm = xForm1 = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(1.0);
      xForm.setColor(0.0);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(196,157, 228);
      xForm.setColorSymmetry(-1.0);

      VariationFunc synth = VariationFuncList.getVariationFuncInstance("synth");
      xForm.addVariation(1.0, synth);
      synth.setParameter("mode", Tools.randomInt(20)); //3;
      synth.setParameter("power", -0.2);

      int numWaves = (int) (Math.random() * 3.5 + 2);
      // Starting circle . . .
      synth.setParameter("a", 0.8 + (Math.random() * 0.4));
      // Wave #1
      synth.setParameter("b", Math.random() * 2);
      synth.setParameter("b_type", Tools.randomInt(7));
      synth.setParameter("b_frq", Tools.randomInt(7) + 1);
      synth.setParameter("b_phs", Math.random() * M_PI);
      synth.setParameter("b_layer", Tools.randomInt(4));
      // Skew effect?
      if (Math.random() < 0.2) {
        synth.setParameter("b_skew", Math.random() * 2 - 1);
      }
      // Exceptionally high frequency?
      if (Math.random() < 0.1) {
        synth.setParameter("b_frq", Tools.randomInt(20) + 7);
      }
      // Usually higher frequencies affect the amplitude
      if (Math.random() < 0.8) {
        synth.setParameter("b", (Double) synth.getParameter("b") / (1 + 0.3 * (Double) synth.getParameter("b_frq")));
      }

      // Wave #2
      synth.setParameter("c", Math.random());
      synth.setParameter("c_type", Tools.randomInt(7));
      synth.setParameter("c_frq", Tools.randomInt(7) + 1);
      synth.setParameter("c_phs", Math.random() * M_PI);
      synth.setParameter("c_layer", Tools.randomInt(4));
      // Skew effect?
      if (Math.random() < 0.2) {
        synth.setParameter("c_skew", Math.random() * 2 - 1);
      }
      // Exceptionally high frequency?
      if (Math.random() < 0.1) {
        synth.setParameter("c_frq", Tools.randomInt(20) + 7);
      }
      // Usually higher frequencies affect the amplitude
      if (Math.random() < 0.8) {
        synth.setParameter("c", (Double) synth.getParameter("c") / (1 + 0.3 * (Double) synth.getParameter("c_frq")));
      }

      // Wave #3
      if (numWaves >= 3) {
        synth.setParameter("d", Math.random());
        synth.setParameter("d_type", Tools.randomInt(7));
        synth.setParameter("d_frq", Tools.randomInt(7) + 1);
        synth.setParameter("d_phs", Math.random() * M_PI);
        synth.setParameter("d_layer", Tools.randomInt(4));
        // Skew effect?
        if (Math.random() < 0.2) {
          synth.setParameter("d_skew", Math.random() * 2 - 1);
        }
        // Exceptionally high frequency?
        if (Math.random() < 0.1) {
          synth.setParameter("d_frq", Tools.randomInt(20) + 7);
        }
        // Usually higher frequencies affect the amplitude
        if (Math.random() < 0.8) {
          synth.setParameter("d", (Double) synth.getParameter("d") / (1 + 0.3 * (Double) synth.getParameter("d_frq")));
        }
      }

      // Wave #4
      if (numWaves >= 4) {
        synth.setParameter("e", Math.random());
        synth.setParameter("e_type", Tools.randomInt(7));
        synth.setParameter("e_frq", Tools.randomInt(7) + 1);
        synth.setParameter("e_phs", Math.random() * M_PI);
        synth.setParameter("e_layer", Tools.randomInt(4));
        // Skew effect?
        if (Math.random() < 0.2) {
          synth.setParameter("e_skew", Math.random() * 2 - 1);
        }
        // Exceptionally high frequency?
        if (Math.random() < 0.1) {
          synth.setParameter("e_frq", Tools.randomInt(20) + 7);
        }
        // Usually higher frequencies affect the amplitude
        if (Math.random() < 0.8) {
          synth.setParameter("e", (Double) synth.getParameter("e") / (1 + 0.3 * (Double) synth.getParameter("e_frq")));
        }
      }

      // Wave #5
      if (numWaves >= 5) {
        synth.setParameter("f", Math.random());
        synth.setParameter("f_type", Tools.randomInt(7));
        synth.setParameter("f_frq", Tools.randomInt(7) + 1);
        synth.setParameter("f_phs", Math.random() * M_PI);
        synth.setParameter("f_layer", Tools.randomInt(4));
        // Skew effect?
        if (Math.random() < 0.2) {
          synth.setParameter("f_skew", Math.random() * 2 - 1);
        }
        // Exceptionally high frequency?
        if (Math.random() < 0.1) {
          synth.setParameter("f_frq", Tools.randomInt(20) + 7);
        }
        // Usually higher frequencies affect the amplitude
        if (Math.random() < 0.8) {
          synth.setParameter("f", (Double) synth.getParameter("f") / (1 + 0.3 * (Double) synth.getParameter("f_frq")));
        }
      }
    }

    // Second "inner" transform is smaller with a little noise
    // added to remove annoying lines at the centre
    {
      XForm xForm = xForm1.makeCopy();
      layer.getXForms().add(xForm);
      xForm.setWeight(1.0);
      xForm.setColor(centre_color);
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(196,157, 228);
      xForm.setColorSymmetry(centre_symmetry);

      VariationFunc synth = xForm.getVariation(0).getFunc();
      xForm.getVariation(0).setAmount(centre_synth);
      synth.setParameter("power", centre_power);
      synth.setParameter("mode", centre_mode);
      synth.setParameter("smooth", centre_smooth);

      VariationFunc noise = VariationFuncList.getVariationFuncInstance("noise");
      xForm.addVariation(centre_noise, noise);

    }

    if (Math.random() < 0.55) {
      XForm xForm = new XForm();
      layer.getXForms().add(xForm);
      xForm.setWeight(5 * Math.random() + 0.125);
      xForm.setColor(centre_color + 0.2 * Math.random());
      //xForm.setColorType(ColorType.TARGET);
      //xForm.setTargetColor(196,157, 228);
      xForm.setColorSymmetry(centre_symmetry - 0.4 * Math.random());

      VariationFunc varFunc = VariationFuncList.getVariationFuncInstance(VariationFuncList.getRandomVariationname());
      xForm.addVariation(0.25 + Math.random() * 1.5, varFunc);

      xForm.getModifiedWeights()[1] = 0.0;
    }
   
   
  
//File outFile = new File("flames/" + frameNumber + ".flame");
        try {
          //new FlameWriter().writeFlame(flame, outFile.getAbsolutePath());
          new FlameWriter().writeFlame(flame, "flames/" + frameNumber + ".flame");
        } catch (Exception ex) {
          System.err.println("Error writing flame " + frameNumber + ": " + ex.getMessage());
        }

    return flame;
}

// end synth_gen flame

public RGBPalette PaletteGen(int redStart, int greenStart, int blueStart, int redEnd, int greenEnd, int blueEnd){
    RGBColor startColor = new RGBColor(redStart,greenStart,blueStart);
    RGBColor endColor = new RGBColor(redEnd,greenEnd,blueEnd);
    RGBPalette palette = new RGBPalette();
    for (int i = 0; i < RGBPalette.PALETTE_SIZE; i++) {
      float t = (float)i / (RGBPalette.PALETTE_SIZE - 1);

      // Optionally add randomness to interpolation
      float jitter = 0.1f * (float)Math.random();
      t = Math.min(1.0f, Math.max(0.0f, t + (Math.random() < 0.5 ? -jitter : jitter)));

      int r = (int)(startColor.getRed()   + t * (endColor.getRed()   - startColor.getRed()));
      int g = (int)(startColor.getGreen() + t * (endColor.getGreen() - startColor.getGreen()));
      int b = (int)(startColor.getBlue()  + t * (endColor.getBlue()  - startColor.getBlue()));

      palette.setColor(i, r, g, b);
    }

    return palette;
}
public void AddFlameMoviePart(FlameMovie flameMovie, Flame flame, int frameCount){
    FlameMoviePart flameMoviePart = new FlameMoviePart();
    flameMoviePart.setFlame(flame);
    flameMoviePart.setFrameCount(frameCount);
    flameMoviePart.setFrameMorphCount(12);
    flameMoviePart.setFlameMorphType(FlameMorphType.FADE);
    flameMovie.addPart(flameMoviePart);
    //return flameMoviePart;
}